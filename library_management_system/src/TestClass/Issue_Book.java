/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package TestClass;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;

import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAccessor;

import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Asus
 */
public class Issue_Book extends javax.swing.JFrame {

    /**
     * Creates new form Issue_Book
     */
    public Issue_Book() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Bk_Id = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        St_Id = new javax.swing.JTextField();
        iss_date = new com.toedter.calendar.JDateChooser();
        Du_date = new com.toedter.calendar.JDateChooser();
        clear_iss = new javax.swing.JButton();
        save_iss = new javax.swing.JButton();
        Book_id = new javax.swing.JLabel();
        Student_Id = new javax.swing.JLabel();
        Issue_date = new javax.swing.JLabel();
        due_Date = new javax.swing.JLabel();
        Delete_button1 = new javax.swing.JButton();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book ID", "Book Name", "Student ID", "Student Name", "Issue", "Due"
            }
        ));
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(50);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(60);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(70);
            jTable1.getColumnModel().getColumn(2).setMinWidth(50);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(60);
            jTable1.getColumnModel().getColumn(2).setMaxWidth(70);
        }

        Bk_Id.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Bk_Id.setToolTipText("");
        Bk_Id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bk_IdActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Sanskrit Text", 0, 18)); // NOI18N
        jLabel1.setText("Issue Book");

        St_Id.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        St_Id.setToolTipText("");
        St_Id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                St_IdActionPerformed(evt);
            }
        });

        clear_iss.setText("clear");
        clear_iss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear_issActionPerformed(evt);
            }
        });

        save_iss.setText("save");
        save_iss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_issActionPerformed(evt);
            }
        });

        Book_id.setFont(new java.awt.Font("Quicksand Medium", 0, 14)); // NOI18N
        Book_id.setText("Book Id");

        Student_Id.setFont(new java.awt.Font("Quicksand Medium", 0, 14)); // NOI18N
        Student_Id.setText("Student Id");

        Issue_date.setFont(new java.awt.Font("Quicksand Medium", 0, 14)); // NOI18N
        Issue_date.setText("Issue Date");

        due_Date.setFont(new java.awt.Font("Quicksand Medium", 0, 14)); // NOI18N
        due_Date.setText("Due Date");

        Delete_button1.setIcon(new javax.swing.ImageIcon("E:\\class pdf\\java\\JavaGui\\back.png")); // NOI18N
        Delete_button1.setText("home");
        Delete_button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_button1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(Delete_button1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(380, 380, 380)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Book_id)
                            .addComponent(Student_Id)
                            .addComponent(Issue_date)
                            .addComponent(due_Date)
                            .addComponent(save_iss))
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Bk_Id, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(St_Id, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(iss_date, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Du_date, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addComponent(clear_iss)))
                        .addGap(2, 2, 2)
                        .addComponent(jLabel3)
                        .addGap(48, 48, 48)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 810, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(80, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(Delete_button1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(Book_id)
                        .addGap(51, 51, 51)
                        .addComponent(Student_Id)
                        .addGap(69, 69, 69)
                        .addComponent(Issue_date)
                        .addGap(50, 50, 50)
                        .addComponent(due_Date)
                        .addGap(42, 42, 42)
                        .addComponent(save_iss, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(Bk_Id, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(St_Id, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(iss_date, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(Du_date, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(clear_iss, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(jLabel3))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(80, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Bk_IdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bk_IdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Bk_IdActionPerformed

    private void St_IdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_St_IdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_St_IdActionPerformed

    private void save_issActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_issActionPerformed
        // TODO add your handling code here:
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");

        String Bk_id = Bk_Id.getText();
        String St_id = St_Id.getText();
        LocalDate issDate = iss_date.getDate().toInstant().atZone(java.time.ZoneId.systemDefault()).toLocalDate();
        LocalDate duDate = Du_date.getDate().toInstant().atZone(java.time.ZoneId.systemDefault()).toLocalDate();
        
        String Iss_Date = issDate.format(formatter);
        String Du_Date = duDate.format(formatter);
        if (Bk_id.isEmpty() || St_id.isEmpty() || Iss_Date.isEmpty() || Du_Date.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please Fill up All Fields", "Try Again", JOptionPane.ERROR_MESSAGE);
        } 
        else if (duDate.isBefore(issDate)) {
            JOptionPane.showMessageDialog(this, "Plase Cheack selected Date");
        }
        
        else{
        int matchFound = 1;
        int smatchFound = 1;
        int bmatchFound = 1;

        String Bk_Nm = "";
        String St_Nm = "";
        //String nidFromFile; 
        String filePath = System.getProperty("user.home") + "/book_records.txt";
        String filePath1 = System.getProperty("user.home") + "/student_records.txt";

        try (BufferedReader reader = new BufferedReader(new FileReader(filePath)); BufferedReader reader1 = new BufferedReader(new FileReader(filePath1))) {
            String line;
            String line1;

            StringBuilder fileContent = new StringBuilder();

            while ((line = reader.readLine()) != null) {

                String[] parts = line.split(",");

                String idFromFile = parts[0].trim();
                String nmFromFile = parts[1].trim();
                String stateFromFile = parts[3].trim();
                //System.out.println("St_id " + nidFromFile);
                //System.out.println("Bk_id " + idFromFile);
                //System.out.println("state " + stateFromFile);

                if (Bk_id.equals(idFromFile) && "true".equals(stateFromFile)) {
                    while ((line1 = reader1.readLine()) != null) {
                        String[] parts1 = line1.split(",");
                        String nidFromFile = parts1[0].trim();
                        String nnmFromFile = parts1[1].trim();
                        if (St_id.equals(nidFromFile)) {
                            //System.out.println("1Ok");
                            parts[3] = "false";
                            Bk_Nm = nmFromFile;
                            St_Nm = nnmFromFile;
                            line = String.join(",", parts);
                            matchFound = 0;

                        } else if (!St_id.equals(nidFromFile)) {
                            smatchFound = 0;
                        }

                    }
//                    System.out.println("1Ok");
//                    parts[3] = "false"; 
//                    Bk_Nm = nmFromFile;
//                    St_Nm = nnmFromFile;
//                    line = String.join(",", parts);
//                    matchFound = true;
                } else if (!Bk_id.equals(idFromFile)) {
                    bmatchFound = 0;
                }

                fileContent.append(line).append("\n");

            }

            try (FileWriter writer = new FileWriter(filePath)) {
                writer.write(fileContent.toString());
            }

        } catch (IOException ex) {
            ex.printStackTrace();
        }
//        boolean matchFound = false;
//        String Bk_Nm = "";
//        String St_Nm = "";
//
//        String bookFilePath = System.getProperty("user.home") + "/book_records.txt";
//        String studentFilePath = System.getProperty("user.home") + "/student_records.txt";
//
//        try (BufferedReader bookReader = new BufferedReader(new FileReader(bookFilePath))) {
//
//    String bookLine;
//
//    while ((bookLine = bookReader.readLine()) != null) {
//        String[] bookParts = bookLine.split(",");
//        String bookIdFromFile = bookParts[0].trim();
//        String bookNmFromFile = bookParts[1].trim();
//        String stateFromFile = bookParts[3].trim();
//        StringBuilder fileContent = new StringBuilder();
//
//        // Open studentReader inside the loop
//        try (BufferedReader studentReader = new BufferedReader(new FileReader(studentFilePath))) {
//            String studentLine;
//
//            while ((studentLine = studentReader.readLine()) != null) {
//                String[] studentParts = studentLine.split(",");
//                String studentIdFromFile = studentParts[0].trim();
//                String studentNmFromFile = studentParts[1].trim();
//
//                // Check if the IDs match and the book is available (state is true)
//                if (Bk_id.equals(bookIdFromFile) && "true".equals(stateFromFile) && St_id.equals(studentIdFromFile)) {
//                    // Update the book state
//                    bookParts[3] = "false";
//                    Bk_Nm = bookNmFromFile;
//                    St_Nm = studentNmFromFile;
//                    matchFound = true;
//                    bookLine = String.join(",", bookParts);
//                    break; // Exit the student record loop once a match is found
//                }
//                fileContent.append(bookLine).append("\n");
//            }
//        } // Close the studentReader
//
//        // Write the updated bookParts to the file
//        try (FileWriter writer = new FileWriter(bookFilePath)) {
//            writer.write(fileContent.toString());
//        }
//
//        if (matchFound) {
//            break; // Exit the book record loop once a match is found
//        }
//    }
//
//} catch (IOException ex) {
//    ex.printStackTrace();
//}
//
//            

// Continue with the rest of your code...
        if (matchFound == 0) {

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.addRow(new Object[]{Bk_id, Bk_Nm, St_id, St_Nm, Iss_Date, Du_Date});
            String filePatha = System.getProperty("user.home") + "/Issue_records.txt";

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePatha))) {
            //DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            int rowCount = model.getRowCount();
            for (int i = 0; i < rowCount; i++) {
                for (int j = 0; j < model.getColumnCount(); j++) {
                    writer.write(model.getValueAt(i, j).toString());
                    if (j < model.getColumnCount() - 1) {
                        writer.write(",");
                    }
                }
                writer.write(",false");
                writer.newLine();
            }

        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to save data", "Error", JOptionPane.ERROR_MESSAGE);
        }

            Bk_Id.setText("");
            St_Id.setText("");
            iss_date.setDate(null);
            Du_date.setDate(null);

        } else if (smatchFound == 0) {
            JOptionPane.showMessageDialog(this, "Studen is not avalabe");
        } else if (bmatchFound == 0) {
            JOptionPane.showMessageDialog(this, "Book is not avalabe");
        }
        }

    }//GEN-LAST:event_save_issActionPerformed

    private void clear_issActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear_issActionPerformed
        // TODO add your handling code here:
        Bk_Id.setText("");
        St_Id.setText("");
        iss_date.setDate(null);
        Du_date.setDate(null);

    }//GEN-LAST:event_clear_issActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        String filePatha = System.getProperty("user.home") + "/Issue_records.txt";

        try (BufferedReader reader = new BufferedReader(new FileReader(filePatha))) {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            String line;
            while ((line = reader.readLine()) != null) {
                String[] rowData = line.split(",");
                if (rowData[6].trim().equals("false") && rowData[6].trim()!=null ) {
                    model.addRow(rowData);
                }
                else{
                System.out.println("Hj");
                }
                //model.addRow(rowData);
            }
            //JOptionPane.showMessageDialog(this, "Data loaded successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to load data", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        //system.out.println("closi win");
//        String filePath = System.getProperty("user.home") + "/Issue_records.txt";
//
//        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
//            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
//            int rowCount = model.getRowCount();
//            for (int i = 0; i < rowCount; i++) {
//                for (int j = 0; j < model.getColumnCount(); j++) {
//                    writer.write(model.getValueAt(i, j).toString());
//                    if (j < model.getColumnCount() - 1) {
//                        writer.write(",");
//                    }
//                }
//                writer.write(",false");
//                writer.newLine();
//            }
//
//        } catch (IOException ex) {
//            ex.printStackTrace();
//            JOptionPane.showMessageDialog(this, "Failed to save data", "Error", JOptionPane.ERROR_MESSAGE);
//        }
    }//GEN-LAST:event_formWindowClosing

    private void Delete_button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_button1ActionPerformed
        // TODO add your handling code here:
        new MainJFrame().setVisible(true);
        dispose();
    }//GEN-LAST:event_Delete_button1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Issue_Book.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Issue_Book.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Issue_Book.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Issue_Book.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Issue_Book().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Bk_Id;
    private javax.swing.JLabel Book_id;
    private javax.swing.JButton Delete_button1;
    private com.toedter.calendar.JDateChooser Du_date;
    private javax.swing.JLabel Issue_date;
    private javax.swing.JTextField St_Id;
    private javax.swing.JLabel Student_Id;
    private javax.swing.JButton clear_iss;
    private javax.swing.JLabel due_Date;
    private com.toedter.calendar.JDateChooser iss_date;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton save_iss;
    // End of variables declaration//GEN-END:variables

}
